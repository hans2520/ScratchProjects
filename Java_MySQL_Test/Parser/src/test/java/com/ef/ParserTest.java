/*
 * This Java source file was generated by the Gradle 'init' task.
 * 
 * 
 * java -cp "parser.jar" com.ef.Parser --accesslog=access.log --startDate=2017-01-01.13:00:00 --duration=hourly --threshold=100
 * java -cp "parser.jar" com.ef.Parser --accesslog=access.log --startDate=2017-01-01.15:00:00 --duration=hourly --threshold=200
 *  --> Should ouput 192.168.11.231. If you open the log file, 192.168.11.231 has 200 or more requests between 
 *  	2017-01-01.15:00:00 and 2017-01-01.15:59:59

 * java -cp "parser.jar" com.ef.Parser --accesslog=access.log --startDate=2017-01-01.13:00:00 --duration=daily --threshold=250
 * java -cp "parser.jar" com.ef.Parser --accesslog=access.log --startDate=2017-01-01.00:00:00 --duration=daily --threshold=500
 *  --> Should output 192.168.102.136. If you open the log file, 192.168.102.136 has 500 or more requests between 
 *  	2017-01-01.00:00:00 and 2017-01-01.23:59:59

 * java -cp "parser.jar" com.ef.Parser --accesslog=access.log  --startDate=2017-01-01.13:00:00 --duration=hourly --threshold=100 
 * 
 * @author hans2520
 */

package com.ef;
import com.ef.Parser;

//Junit5
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class ParserTest {
    @Test public void commandSimulator() throws Exception {
    	Parser parser = new Parser();
    	
    	System.out.println("TEST 1: ");
    	String[] parameters = "--accesslog=access.log --startDate=2017-01-01.13:00:00 --duration=hourly --threshold=100".split(" ");
        assertTrue(parser.main(parameters).contains("192.168.228.188"), "Parser should ouput 192.168.228.188. If you open the log file, " +
        		"192.168.228.188 has 100 or more requests between 2017-01-01.15:00:00 and 2017-01-01.15:59:59.");
        
        System.out.println("TEST 2: ");
                 parameters = "--startDate=2017-01-01.13:00:00 --duration=hourly --threshold=100".split(" ");
        assertTrue(parser.main(parameters).contains("192.168.77.101"), "Parser should output 192.168.77.101. If you open the log file, " +
        		"192.168.77.101 has 100 or more requests between 2017-01-01.00:00:00 and 2017-01-01.23:59:59.");
       
        System.out.println("TEST 3: ");
    			 parameters = "--accesslog=access.log --startDate=2017-01-01.15:00:00 --duration=hourly --threshold=200".split(" ");
        assertTrue(parser.main(parameters).contains("192.168.11.231"), "Parser should ouput 192.168.11.231. If you open the log file, " +
        		"192.168.11.231 has 200 or more requests between 2017-01-01.15:00:00 and 2017-01-01.15:59:59.");
        
        System.out.println("TEST 4: ");
        		 parameters = "--startDate=2017-01-01.13:00:00 --duration=daily --threshold=250".split(" ");
        assertTrue(parser.main(parameters).contains("192.168.38.77"), "Parser should output 192.168.38.77 . If you open the log file, " +
        		"192.168.38.77 has 250 or more requests between 2017-01-01.00:00:00 and 2017-01-01.23:59:59.");
        
        System.out.println("TEST 5: ");
        		 parameters = "--accesslog=access.log --startDate=2017-01-01.00:00:00 --duration=daily --threshold=500".split(" ");
        assertTrue(parser.main(parameters).contains("192.168.102.136"), "Parser should output 192.168.102.136. If you open the log file, " +
        		"192.168.102.136 has 500 or more requests between 2017-01-01.00:00:00 and 2017-01-01.23:59:59.");
       
    }
    
    @Test public void blackListTest() throws Exception {
    	Parser parser = new Parser();

		Connection con = null;
	    PreparedStatement ps = null;
	    ResultSet rs = null;

	    try {
	    	con = DBConnectionManager.getNewConnection();
	        ps = con.prepareStatement("TRUNCATE TABLE host_blacklist");
	        ps.execute();
	        ps.close();

	    	String[] blacklist = {"192.168.31.26,192.168.129.191,10.10.10.1,192.192.192.192", "262,350,1000,25"};
	    	parser.addViolatingIPsToBlacklist(blacklist, "HOUR", 25);
	    	
	    	String[] blacklist2 = {"10.11.12.13,14.15.16.17,10.10.10.1,192.192.192.192", "262,350,333,999"};
	    	parser.addViolatingIPsToBlacklist(blacklist2, "DAILY", 1000);
	        	    	
	    	StringBuilder violationIPs = new StringBuilder(), violationCounts = new StringBuilder();
	        ps = con.prepareStatement("SELECT host_id, message FROM host_blacklist");
	        rs = ps.executeQuery();
	        if (rs != null && rs.isBeforeFirst()) {
				while (rs.next()) {
		        	violationIPs.append(rs.getString(1)).append(",");
		        	violationCounts.append(rs.getString(2)).append(",");
				}
				
	        } 
	        
	        for (String ip : blacklist[0].split(",")) {
	        	assertTrue(violationIPs.toString().contains(ip));
	        }
	        for (String count : blacklist[1].split(",")) {
	        	assertTrue(violationCounts.toString().contains("262"));
	        	assertTrue(violationCounts.toString().contains("350"));
	        	assertTrue(violationCounts.toString().contains("Host IP has multiple violations of blacklisted activity"));
	        	assertTrue(violationCounts.toString().contains("1000"));
	        	assertTrue(violationCounts.toString().contains("25"));
	        }
  
	        for (String ip : blacklist2[0].split(",")) {
	        	assertTrue(violationIPs.toString().contains(ip));
	        }
	        for (String count : blacklist2[1].split(",")) {
	        	assertTrue(violationCounts.toString().contains("262"));
	        	assertTrue(violationCounts.toString().contains("350"));
	        	assertTrue(violationCounts.toString().contains("Host IP has multiple violations of blacklisted activity"));
	        	assertTrue(!violationCounts.toString().contains("333"));
	        	assertTrue(!violationCounts.toString().contains("999"));
	        }

	    } finally {
	        try {
	        	if (rs != null)
	        		rs.close();
	        	if (ps != null)
	        		ps.close();
	        	if (con != null)
	        		con.close();
	        } catch (Throwable t) { }
		}
    }
}
